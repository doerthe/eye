#Processed by EYE v18.0515.2100 josd
<<<<<<< HEAD:programming/preduction/palindrome2-proof.n3
#eye --n3 http://josd.github.io/eye/i/preduction/palindrome2.n3 --query http://josd.github.io/eye/i/preduction/palindrome2-query.n3

PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX p: <http://josd.github.io/eye/i/preduction#>
PREFIX e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>
PREFIX : <http://josd.github.io/eye/i#>
=======
#eye --n3 http://josd.github.io/eye/programming/preduction/palindrome2.n3 --query http://josd.github.io/eye/programming/preduction/palindrome2-query.n3

PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX p: <http://josd.github.io/eye/programming/preduction#>
PREFIX e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>
PREFIX : <http://josd.github.io/eye/programming#>
>>>>>>> master:programming/preduction/palindrome2-proof.n3
PREFIX r: <http://www.w3.org/2000/10/swap/reason#>

[] a r:Proof, r:Conjunction;
  r:component <#lemma1>;
  r:gives {
    "ingirumimusnocteetconsumimurigni" a :Palindrome.
  }.

<#lemma1> a r:Inference;
  r:gives {
    "ingirumimusnocteetconsumimurigni" a :Palindrome.
  };
  r:evidence (
    [ a r:Fact; r:gives {("atom_codes" "ingirumimusnocteetconsumimurigni" (105 110 103 105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105)) e:derive true}]
    <#lemma2>
  );
  r:rule <#lemma3>.

<#lemma2> a r:Inference;
  r:gives {
    ((105 110 103 105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    <#lemma4>
  );
  r:rule <#lemma5>.

<#lemma3> a r:Extraction;
  r:gives {
    {("atom_codes" "ingirumimusnocteetconsumimurigni" ?x_0_1) e:derive true.
     (?x_0_1) :palindrome true} => {"ingirumimusnocteetconsumimurigni" a :Palindrome}.
  };
<<<<<<< HEAD:programming/preduction/palindrome2-proof.n3
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/i/preduction/palindrome2-query.n3>].
=======
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/programming/preduction/palindrome2-query.n3>].
>>>>>>> master:programming/preduction/palindrome2-proof.n3

<#lemma4> a r:Inference;
  r:gives {
    ((105 110 103 105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push ()) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(105 110 103 105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (105 (110 103 105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(105) e:firstRest (105 ())}]
    <#lemma6>
  );
  r:rule <#lemma7>.

<#lemma5> a r:Extraction;
  r:gives {
    {(?x_0_2) :palindrome true} <= {(?x_0_2 :push ()) :palindrome true}.
  };
<<<<<<< HEAD:programming/preduction/palindrome2-proof.n3
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/i/preduction/palindrome2.n3>].
=======
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/programming/preduction/palindrome2.n3>].
>>>>>>> master:programming/preduction/palindrome2-proof.n3

<#lemma6> a r:Inference;
  r:gives {
    ((110 103 105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(110 103 105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (110 (103 105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(110 105) e:firstRest (110 (105))}]
    <#lemma8>
  );
  r:rule <#lemma7>.

<#lemma7> a r:Extraction;
  r:gives {
    {(?x_0_3 :push ?x_4_3) :palindrome true} <= {?x_0_3 e:firstRest (?x_1_3 ?x_2_3).
     ?x_3_3 e:firstRest (?x_1_3 ?x_4_3).
     (?x_2_3 :push ?x_3_3) :palindrome true}.
  };
<<<<<<< HEAD:programming/preduction/palindrome2-proof.n3
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/i/preduction/palindrome2.n3>].
=======
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/programming/preduction/palindrome2.n3>].
>>>>>>> master:programming/preduction/palindrome2-proof.n3

<#lemma8> a r:Inference;
  r:gives {
    ((103 105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(103 105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (103 (105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(103 110 105) e:firstRest (103 (110 105))}]
    <#lemma9>
  );
  r:rule <#lemma7>.

<#lemma9> a r:Inference;
  r:gives {
    ((105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(105 114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (105 (114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(105 103 110 105) e:firstRest (105 (103 110 105))}]
    <#lemma10>
  );
  r:rule <#lemma7>.

<#lemma10> a r:Inference;
  r:gives {
    ((114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(114 117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (114 (117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(114 105 103 110 105) e:firstRest (114 (105 103 110 105))}]
    <#lemma11>
  );
  r:rule <#lemma7>.

<#lemma11> a r:Inference;
  r:gives {
    ((117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(117 109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (117 (109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(117 114 105 103 110 105) e:firstRest (117 (114 105 103 110 105))}]
    <#lemma12>
  );
  r:rule <#lemma7>.

<#lemma12> a r:Inference;
  r:gives {
    ((109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(109 105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (109 (105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(109 117 114 105 103 110 105) e:firstRest (109 (117 114 105 103 110 105))}]
    <#lemma13>
  );
  r:rule <#lemma7>.

<#lemma13> a r:Inference;
  r:gives {
    ((105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(105 109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (105 (109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(105 109 117 114 105 103 110 105) e:firstRest (105 (109 117 114 105 103 110 105))}]
    <#lemma14>
  );
  r:rule <#lemma7>.

<#lemma14> a r:Inference;
  r:gives {
    ((109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(109 117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (109 (117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(109 105 109 117 114 105 103 110 105) e:firstRest (109 (105 109 117 114 105 103 110 105))}]
    <#lemma15>
  );
  r:rule <#lemma7>.

<#lemma15> a r:Inference;
  r:gives {
    ((117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(117 115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (117 (115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(117 109 105 109 117 114 105 103 110 105) e:firstRest (117 (109 105 109 117 114 105 103 110 105))}]
    <#lemma16>
  );
  r:rule <#lemma7>.

<#lemma16> a r:Inference;
  r:gives {
    ((115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(115 110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (115 (110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(115 117 109 105 109 117 114 105 103 110 105) e:firstRest (115 (117 109 105 109 117 114 105 103 110 105))}]
    <#lemma17>
  );
  r:rule <#lemma7>.

<#lemma17> a r:Inference;
  r:gives {
    ((110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (115 117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(110 111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (110 (111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (110 (115 117 109 105 109 117 114 105 103 110 105))}]
    <#lemma18>
  );
  r:rule <#lemma7>.

<#lemma18> a r:Inference;
  r:gives {
    ((111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (110 115 117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(111 99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (111 (99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (111 (110 115 117 109 105 109 117 114 105 103 110 105))}]
    <#lemma19>
  );
  r:rule <#lemma7>.

<#lemma19> a r:Inference;
  r:gives {
    ((99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (111 110 115 117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(99 116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (99 (116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (99 (111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    <#lemma20>
  );
  r:rule <#lemma7>.

<#lemma20> a r:Inference;
  r:gives {
    ((116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (99 111 110 115 117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(116 101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (116 (101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (116 (99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    <#lemma21>
  );
  r:rule <#lemma7>.

<#lemma21> a r:Inference;
  r:gives {
    ((101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :push (116 99 111 110 115 117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(101 101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (101 (101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (101 (116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    <#lemma22>
  );
  r:rule <#lemma23>.

<#lemma22> a r:Inference;
  r:gives {
    ((101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :pop (101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (101 (116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(101 116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (101 (116 99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    <#lemma24>
  );
  r:rule <#lemma25>.

<#lemma23> a r:Extraction;
  r:gives {
    {(?x_0_4 :push ?x_4_4) :palindrome true} <= {?x_0_4 e:firstRest (?x_1_4 ?x_2_4).
     ?x_3_4 e:firstRest (?x_1_4 ?x_4_4).
     (?x_2_4 :pop ?x_3_4) :palindrome true}.
  };
<<<<<<< HEAD:programming/preduction/palindrome2-proof.n3
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/i/preduction/palindrome2.n3>].
=======
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/programming/preduction/palindrome2.n3>].
>>>>>>> master:programming/preduction/palindrome2-proof.n3

<#lemma24> a r:Inference;
  r:gives {
    ((116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) :pop (116 99 111 110 115 117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (116 (99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(116 99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (116 (99 111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    <#lemma26>
  );
  r:rule <#lemma25>.

<#lemma25> a r:Extraction;
  r:gives {
    {(?x_0_5 :pop ?x_3_5) :palindrome true} <= {?x_0_5 e:firstRest (?x_1_5 ?x_2_5).
     ?x_3_5 e:firstRest (?x_1_5 ?x_4_5).
     (?x_2_5 :pop ?x_4_5) :palindrome true}.
  };
<<<<<<< HEAD:programming/preduction/palindrome2-proof.n3
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/i/preduction/palindrome2.n3>].
=======
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/programming/preduction/palindrome2.n3>].
>>>>>>> master:programming/preduction/palindrome2-proof.n3

<#lemma26> a r:Inference;
  r:gives {
    ((99 111 110 115 117 109 105 109 117 114 105 103 110 105) :pop (99 111 110 115 117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (99 (111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(99 111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (99 (111 110 115 117 109 105 109 117 114 105 103 110 105))}]
    <#lemma27>
  );
  r:rule <#lemma25>.

<#lemma27> a r:Inference;
  r:gives {
    ((111 110 115 117 109 105 109 117 114 105 103 110 105) :pop (111 110 115 117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (111 (110 115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(111 110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (111 (110 115 117 109 105 109 117 114 105 103 110 105))}]
    <#lemma28>
  );
  r:rule <#lemma25>.

<#lemma28> a r:Inference;
  r:gives {
    ((110 115 117 109 105 109 117 114 105 103 110 105) :pop (110 115 117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (110 (115 117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(110 115 117 109 105 109 117 114 105 103 110 105) e:firstRest (110 (115 117 109 105 109 117 114 105 103 110 105))}]
    <#lemma29>
  );
  r:rule <#lemma25>.

<#lemma29> a r:Inference;
  r:gives {
    ((115 117 109 105 109 117 114 105 103 110 105) :pop (115 117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(115 117 109 105 109 117 114 105 103 110 105) e:firstRest (115 (117 109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(115 117 109 105 109 117 114 105 103 110 105) e:firstRest (115 (117 109 105 109 117 114 105 103 110 105))}]
    <#lemma30>
  );
  r:rule <#lemma25>.

<#lemma30> a r:Inference;
  r:gives {
    ((117 109 105 109 117 114 105 103 110 105) :pop (117 109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(117 109 105 109 117 114 105 103 110 105) e:firstRest (117 (109 105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(117 109 105 109 117 114 105 103 110 105) e:firstRest (117 (109 105 109 117 114 105 103 110 105))}]
    <#lemma31>
  );
  r:rule <#lemma25>.

<#lemma31> a r:Inference;
  r:gives {
    ((109 105 109 117 114 105 103 110 105) :pop (109 105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(109 105 109 117 114 105 103 110 105) e:firstRest (109 (105 109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(109 105 109 117 114 105 103 110 105) e:firstRest (109 (105 109 117 114 105 103 110 105))}]
    <#lemma32>
  );
  r:rule <#lemma25>.

<#lemma32> a r:Inference;
  r:gives {
    ((105 109 117 114 105 103 110 105) :pop (105 109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(105 109 117 114 105 103 110 105) e:firstRest (105 (109 117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(105 109 117 114 105 103 110 105) e:firstRest (105 (109 117 114 105 103 110 105))}]
    <#lemma33>
  );
  r:rule <#lemma25>.

<#lemma33> a r:Inference;
  r:gives {
    ((109 117 114 105 103 110 105) :pop (109 117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(109 117 114 105 103 110 105) e:firstRest (109 (117 114 105 103 110 105))}]
    [ a r:Fact; r:gives {(109 117 114 105 103 110 105) e:firstRest (109 (117 114 105 103 110 105))}]
    <#lemma34>
  );
  r:rule <#lemma25>.

<#lemma34> a r:Inference;
  r:gives {
    ((117 114 105 103 110 105) :pop (117 114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(117 114 105 103 110 105) e:firstRest (117 (114 105 103 110 105))}]
    [ a r:Fact; r:gives {(117 114 105 103 110 105) e:firstRest (117 (114 105 103 110 105))}]
    <#lemma35>
  );
  r:rule <#lemma25>.

<#lemma35> a r:Inference;
  r:gives {
    ((114 105 103 110 105) :pop (114 105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(114 105 103 110 105) e:firstRest (114 (105 103 110 105))}]
    [ a r:Fact; r:gives {(114 105 103 110 105) e:firstRest (114 (105 103 110 105))}]
    <#lemma36>
  );
  r:rule <#lemma25>.

<#lemma36> a r:Inference;
  r:gives {
    ((105 103 110 105) :pop (105 103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(105 103 110 105) e:firstRest (105 (103 110 105))}]
    [ a r:Fact; r:gives {(105 103 110 105) e:firstRest (105 (103 110 105))}]
    <#lemma37>
  );
  r:rule <#lemma25>.

<#lemma37> a r:Inference;
  r:gives {
    ((103 110 105) :pop (103 110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(103 110 105) e:firstRest (103 (110 105))}]
    [ a r:Fact; r:gives {(103 110 105) e:firstRest (103 (110 105))}]
    <#lemma38>
  );
  r:rule <#lemma25>.

<#lemma38> a r:Inference;
  r:gives {
    ((110 105) :pop (110 105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(110 105) e:firstRest (110 (105))}]
    [ a r:Fact; r:gives {(110 105) e:firstRest (110 (105))}]
    <#lemma39>
  );
  r:rule <#lemma25>.

<#lemma39> a r:Inference;
  r:gives {
    ((105) :pop (105)) :palindrome true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(105) e:firstRest (105 ())}]
    [ a r:Fact; r:gives {(105) e:firstRest (105 ())}]
    <#lemma40>
  );
  r:rule <#lemma25>.

<#lemma40> a r:Extraction;
  r:gives {
    (() :pop ()) :palindrome true.
  };
<<<<<<< HEAD:programming/preduction/palindrome2-proof.n3
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/i/preduction/palindrome2.n3>].
=======
  r:because [ a r:Parsing; r:source <http://josd.github.io/eye/programming/preduction/palindrome2.n3>].
>>>>>>> master:programming/preduction/palindrome2-proof.n3

#2018-08-23T10:54:08.906Z in=27 out=1 ent=1 step=1 brake=1 inf=114897 sec=0.115 inf/sec=999104
#ENDS

